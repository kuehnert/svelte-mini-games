{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\Card.svelte",
    "..\\Memory.svelte",
    "..\\WhackAMole.svelte"
  ],
  "sourcesContent": [
    "<script>\n  export let id;\n  export let name;\n  export let state;\n  export let handleClick;\n  let imgSrc;\n\n  $: {\n    if (state === 0) {\n      imgSrc = \"images/memory/blank.png\";\n    } else if (state === 1) {\n      imgSrc = `images/memory/${name}.png`;\n    } else {\n      imgSrc = \"images/memory/white.png\";\n    }\n  }\n</script>\n\n<style>\n  .Card {\n    display: flex;\n    width: 100px;\n    height: 100px;\n  }\n</style>\n\n<img class=\"Card\" src={imgSrc} name={name} alt={name} id={id} on:click={handleClick} />\n",
    "<script>\n  import Card from \"./Card.svelte\";\n  import { cards, disabled, message, score } from \"./store\";\n  let firstCard = null;\n\n  function handleClick(event) {\n    const currentCard = $cards.find(c => c.id === event.target.id);\n    if ($disabled || currentCard.state === 2) {\n      return;\n    }\n\n    cards.changeState(currentCard.id, 1);\n\n    if (firstCard == null) {\n      firstCard = currentCard;\n    } else {\n      // second card chosen\n      disabled.set(true);\n      if (firstCard.name === currentCard.name) {\n        message.set(\"You have a pair!\");\n        score.update(s => s + 1);\n        setTimeout(() => {\n          cards.changeState(currentCard.id, 2);\n          cards.changeState(firstCard.id, 2);\n          firstCard = null;\n          if ($score === 6) {\n            message.set(\"Congratulations! You have won the game. :)\");\n          } else {\n            message.set(\"\");\n            disabled.set(false);\n          }\n        }, 2000);\n      } else {\n        message.set(\"No cigar!\");\n        disabled.set(true);\n        setTimeout(() => {\n          cards.changeState(currentCard.id, 0);\n          cards.changeState(firstCard.id, 0);\n          firstCard = null;\n          message.set(\"\");\n          disabled.set(false);\n        }, 2000);\n      }\n    }\n  }\n</script>\n\n<style>\n  .Grid {\n    display: flex;\n    flex-wrap: wrap;\n    width: 400px;\n    height: 300px;\n  }\n</style>\n\n<h1>Memory Game</h1>\n<div class=\"ui grid\">\n  <div class=\"eight wide column\">\n    <div class=\"Grid\">\n      {#each $cards as card (card.id)}\n        <Card id={card.id} name={card.name} state={card.state} {handleClick} />\n      {/each}\n    </div>\n  </div>\n\n  <div class=\"eight wide column\">\n    <h3>Score: {$score}</h3>\n    <h3>{$message}</h3>\n    <p>\n      Original here:\n      <a href=\"https://www.youtube.com/watch?v=lhNdUVh3qCc&t=115s\" target=\"new\">\n        Ania Kubow's YouTube tutorial\n      </a>\n    </p>\n  </div>\n</div>\n",
    "<script>\n  import { onMount } from \"svelte\";\n\n  let score = 0;\n  let seconds = 30;\n  let hole = null;\n  let message = \"\";\n  let timer;\n\n  function newHole() {\n    hole = Math.floor(Math.random() * 9);\n  }\n\n  onMount(() => {\n    timer = setInterval(() => {\n      seconds -= 1;\n      if (seconds === 0) {\n        clearInterval(timer);\n        message = \"Game Over!\";\n      } else {\n        message = \"\";\n        newHole();\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(timer);\n    };\n  });\n\n  function handleClick(event) {\n    if (seconds < 1) return;\n\n    const square = event.target;\n    if (square.classList.contains(\"mole\")) {\n      score += 1;\n      message = \"Hit!\";\n      hole = null;\n    } else {\n      if (score > 0) {\n        score -= 1;\n      }\n      message = \"Miss!\";\n    }\n  }\n</script>\n\n<style>\n  .mole {\n    background-image: url(\"images/mouse.svg\");\n    background-size: cover;\n  }\n</style>\n\n<h1>Whack a Mole!</h1>\n<div class=\"ui grid\">\n  <div class=\"eight wide column\">\n    <div class=\"squareGrid\">\n      {#each Array(9) as _, i}\n        <div\n          class=\"square\"\n          class:mole={hole === i}\n          id=\"i\"\n          on:click={handleClick} />\n      {/each}\n    </div>\n  </div>\n  <div class=\"eight wide column\">\n    <h3>Time left: {seconds}</h3>\n    <h3>Score: {score}</h3>\n    <h3>{message}</h3>\n\n    <p>\n      Original here:\n      <a href=\"https://www.youtube.com/watch?v=lhNdUVh3qCc&t=699s\" target=\"new\">\n        Ania Kubow's YouTube tutorial\n      </a>\n    </p>\n    <p>\n      <a\n        href=\"https://openmoji.org/library/#group=animals-nature&emoji=1F42D\"\n        target=\"new\">\n        Mouse face emoji by Sofie Ascherl\n      </a>\n    </p>\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAmBE,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,AACf,CAAC;ACyBD,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,AACf,CAAC;ACLD,KAAK,eAAC,CAAC,AACL,gBAAgB,CAAE,IAAI,kBAAkB,CAAC,CACzC,eAAe,CAAE,KAAK,AACxB,CAAC"
}